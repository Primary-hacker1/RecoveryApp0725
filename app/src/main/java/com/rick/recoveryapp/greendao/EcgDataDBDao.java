package com.rick.recoveryapp.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.rick.recoveryapp.greendao.entity.EcgDataDB;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "ECG_DATA_DB".
*/
public class EcgDataDBDao extends AbstractDao<EcgDataDB, Long> {

    public static final String TABLENAME = "ECG_DATA_DB";

    /**
     * Properties of entity EcgDataDB.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Db_id = new Property(0, Long.class, "db_id", true, "_id");
        public final static Property CooY = new Property(1, Float.class, "cooY", false, "COO_Y");
        public final static Property RecordID = new Property(2, String.class, "RecordID", false, "RECORD_ID");
    }


    public EcgDataDBDao(DaoConfig config) {
        super(config);
    }
    
    public EcgDataDBDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"ECG_DATA_DB\" (" + //
                "\"_id\" INTEGER PRIMARY KEY AUTOINCREMENT ," + // 0: db_id
                "\"COO_Y\" REAL," + // 1: cooY
                "\"RECORD_ID\" TEXT);"); // 2: RecordID
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"ECG_DATA_DB\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, EcgDataDB entity) {
        stmt.clearBindings();
 
        Long db_id = entity.getDb_id();
        if (db_id != null) {
            stmt.bindLong(1, db_id);
        }
 
        Float cooY = entity.getCooY();
        if (cooY != null) {
            stmt.bindDouble(2, cooY);
        }
 
        String RecordID = entity.getRecordID();
        if (RecordID != null) {
            stmt.bindString(3, RecordID);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, EcgDataDB entity) {
        stmt.clearBindings();
 
        Long db_id = entity.getDb_id();
        if (db_id != null) {
            stmt.bindLong(1, db_id);
        }
 
        Float cooY = entity.getCooY();
        if (cooY != null) {
            stmt.bindDouble(2, cooY);
        }
 
        String RecordID = entity.getRecordID();
        if (RecordID != null) {
            stmt.bindString(3, RecordID);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public EcgDataDB readEntity(Cursor cursor, int offset) {
        EcgDataDB entity = new EcgDataDB( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // db_id
            cursor.isNull(offset + 1) ? null : cursor.getFloat(offset + 1), // cooY
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2) // RecordID
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, EcgDataDB entity, int offset) {
        entity.setDb_id(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setCooY(cursor.isNull(offset + 1) ? null : cursor.getFloat(offset + 1));
        entity.setRecordID(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(EcgDataDB entity, long rowId) {
        entity.setDb_id(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(EcgDataDB entity) {
        if(entity != null) {
            return entity.getDb_id();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(EcgDataDB entity) {
        return entity.getDb_id() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
