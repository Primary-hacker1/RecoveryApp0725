package com.rick.recoveryapp.greendao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import com.rick.recoveryapp.greendao.entity.MacDr;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "MAC_DR".
*/
public class MacDrDao extends AbstractDao<MacDr, Long> {

    public static final String TABLENAME = "MAC_DR";

    /**
     * Properties of entity MacDr.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ID = new Property(0, Long.class, "ID", true, "_id");
        public final static Property BlueThMac = new Property(1, String.class, "BlueThMac", false, "BLUE_TH_MAC");
        public final static Property EcgMac = new Property(2, String.class, "EcgMac", false, "ECG_MAC");
        public final static Property BloodMac = new Property(3, String.class, "BloodMac", false, "BLOOD_MAC");
        public final static Property OxygenMac = new Property(4, String.class, "OxygenMac", false, "OXYGEN_MAC");
    }


    public MacDrDao(DaoConfig config) {
        super(config);
    }
    
    public MacDrDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"MAC_DR\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: ID
                "\"BLUE_TH_MAC\" TEXT," + // 1: BlueThMac
                "\"ECG_MAC\" TEXT," + // 2: EcgMac
                "\"BLOOD_MAC\" TEXT," + // 3: BloodMac
                "\"OXYGEN_MAC\" TEXT);"); // 4: OxygenMac
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"MAC_DR\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, MacDr entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
 
        String BlueThMac = entity.getBlueThMac();
        if (BlueThMac != null) {
            stmt.bindString(2, BlueThMac);
        }
 
        String EcgMac = entity.getEcgMac();
        if (EcgMac != null) {
            stmt.bindString(3, EcgMac);
        }
 
        String BloodMac = entity.getBloodMac();
        if (BloodMac != null) {
            stmt.bindString(4, BloodMac);
        }
 
        String OxygenMac = entity.getOxygenMac();
        if (OxygenMac != null) {
            stmt.bindString(5, OxygenMac);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, MacDr entity) {
        stmt.clearBindings();
 
        Long ID = entity.getID();
        if (ID != null) {
            stmt.bindLong(1, ID);
        }
 
        String BlueThMac = entity.getBlueThMac();
        if (BlueThMac != null) {
            stmt.bindString(2, BlueThMac);
        }
 
        String EcgMac = entity.getEcgMac();
        if (EcgMac != null) {
            stmt.bindString(3, EcgMac);
        }
 
        String BloodMac = entity.getBloodMac();
        if (BloodMac != null) {
            stmt.bindString(4, BloodMac);
        }
 
        String OxygenMac = entity.getOxygenMac();
        if (OxygenMac != null) {
            stmt.bindString(5, OxygenMac);
        }
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public MacDr readEntity(Cursor cursor, int offset) {
        MacDr entity = new MacDr( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // ID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // BlueThMac
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // EcgMac
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // BloodMac
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4) // OxygenMac
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, MacDr entity, int offset) {
        entity.setID(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setBlueThMac(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setEcgMac(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setBloodMac(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setOxygenMac(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(MacDr entity, long rowId) {
        entity.setID(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(MacDr entity) {
        if(entity != null) {
            return entity.getID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(MacDr entity) {
        return entity.getID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
